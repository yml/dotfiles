# If not running interactively, don't do anything
[[ -z $PS1 ]] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
#HISTCONTROL=ignoreboth
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

#############################################################################
# GIT prompt in PS1
#############################################################################
function git_prompt_get_git_branch () {
  # On branches, this will return the branch name
  # On non-branches, (no branch)
  ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
  if [[ "$ref" != "" ]]; then
    echo "$ref"
  else
    echo "(no branch)"
  fi
}

function git_prompt_get_git_info () {
  # Grab the branch
  branch="$(git_prompt_get_git_branch)"

  # If there are any branches
  if [[ "$branch" != "" ]]; then
    echo "$branch"
  fi
}
#############################################################################
# history
#############################################################################
function dedup_bash_history () {
    rm -f  ~./.unduped_bash_history && \
    nl ~/.bash_history | sort -k 2  -k 1,1nr| uniq -f 1 | sort -n | cut -f 2 > ~/.unduped_bash_history && \
    cp  ~/.unduped_bash_history ~/.bash_history
}
#############################################################################
# PS1 prompt
#############################################################################
PROMPT_COMMAND='history -a && dedup_bash_history'
PS1='\[\033[01;31m\]\w\[\033[00m\] $(git_prompt_get_git_info)\n${debian_chroot:+($debian_chroot)}\[\033[01;34m\]\u\[\033[01;32m\]@\[\033[01;34m\]\h\[\033[00m\]\$ '


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# TODO delete if it is still commented in few months (2018-09-13)
# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
# case $TERM in

#   screen)
#     TERM_IS_COLOR=true
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
#     TERM_CAN_TITLE=true
#   ;;

#   xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
#     TERM_IS_COLOR=true
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
#     TERM_CAN_TITLE=true
#   ;;

#   linux)
#     TERM_IS_COLOR=true
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
#     TERM_CAN_TITLE=false
#   ;;

#   xterm|vt100)
#     TERM_IS_COLOR=true
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
#     TERM_CAN_TITLE=true
#   ;;

#   *xterm*|eterm|rxvt*)
#     TERM_IS_COLOR=true
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
#     TERM_CAN_TITLE=true
#   ;;

#   *)
#     TERM_IS_COLOR=false
#     TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
#     TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
#     TERM_CAN_TITLE=false
#   ;;

# esac
# ----------- End of previous section ----------------

# function to an npm bin to $PATH
function addNpmBinToPath() {
    if [[ -d $(npm bin) ]]; then
        export PATH=$(npm bin):$PATH
    fi
}
#function to use go tip
function useGoTip() {
    if [[ -d $HOME/gotip ]]; then
        export GOROOT=$HOME/gotip
        export PATH=$GOROOT/bin:$PATH
    fi
}

# Default installation path for GOLANG
[[ -d /usr/local/go/bin/ ]] && PATH+=":/usr/local/go/bin/"

# Add env variable to work with GO easier
if [[ -d $HOME/gopath ]]; then
    export GOPATH=$HOME/gopath
    PATH+=":$GOPATH/bin"
fi

# Starting with go 1.11 GOPATH is not needed anymore
[[ -d $HOME/go/bin ]] && PATH+=":$HOME/go/bin"

# Interative node js version manager
[[ -d $HOME/n/bin ]] && PATH+=":$HOME/n/bin"

[[ -d $HOME/.local/bin ]] && PATH+=":$HOME/.local/bin"

# if ag is available use it by default for FZF
[[ -x $(command -v ag) ]] && export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

if [[ -x $(command -v nvim) ]]; then
    # nvim
    export EDITOR=nvim
    export VISUAL=nvim
    export  XDG_CONFIG_HOME=~/.config
    export GIT_EDITOR=nvim
else
    # vim
    export EDITOR=vim
    export VISUAL=vim
fi

# remap caps lock to escape
[[ -x $(command -v setxkbmap) ]] && setxkbmap -option "caps:swapescape"

# Set my GPG key
export GPGKEY=2F74DA04

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
    source /etc/bash_completion
fi

[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash

# Alias definitions.
[[ -f ~/.bash_aliases ]] && source ~/.bash_aliases

# Local override
[[ -f ~/.bash_local ]] && source ~/.bash_local

